/* tslint:disable */
/* eslint-disable */
/*
Synchronize API

Synchronize API allows you to lipsync a video to any audio in any language.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LipSyncExtended } from '../models';
// @ts-ignore
import { LipSyncInitial } from '../models';
// @ts-ignore
import { LipsyncDto } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LipsyncApi - axios parameter creator
 * @export
 */
export const LipsyncApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use the video ID from the POST request to check video status. Keep checking until status is \'completed\' and a download URL is provided.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLipsync: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLipsync', 'id', id)
            const localVarPath = `/lipsync/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lipsync/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit a set of urls to publically hosted audio and video files or to YouTube videos. Our synchronizer will sync the video\'s lip movements to match the audio and return the synced video.
         * @summary 
         * @param {LipsyncDto} lipsyncDto The audio + video data to be synced. Set synergize &#x3D; false to skip our synergizer post-processor for a 10x speedup, but w/ a degredation in output quality.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lipSync: async (lipsyncDto: LipsyncDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lipsyncDto' is not null or undefined
            assertParamExists('lipSync', 'lipsyncDto', lipsyncDto)
            const localVarPath = `/lipsync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: lipsyncDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lipsync',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(lipsyncDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} audioUrl A url to the audio file to be synchronized -- must be publicly accessible
         * @param {string} videoUrl A url to the video file to be synchronized -- must be publicly accessible
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lipsyncCost: async (audioUrl: string, videoUrl: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'audioUrl' is not null or undefined
            assertParamExists('lipsyncCost', 'audioUrl', audioUrl)
            // verify required parameter 'videoUrl' is not null or undefined
            assertParamExists('lipsyncCost', 'videoUrl', videoUrl)
            const localVarPath = `/lipsync/cost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })
            if (audioUrl !== undefined) {
                localVarQueryParameter['audioUrl'] = audioUrl;
            }

            if (videoUrl !== undefined) {
                localVarQueryParameter['videoUrl'] = videoUrl;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lipsync/cost',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LipsyncApi - functional programming interface
 * @export
 */
export const LipsyncApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LipsyncApiAxiosParamCreator(configuration)
    return {
        /**
         * Use the video ID from the POST request to check video status. Keep checking until status is \'completed\' and a download URL is provided.
         * @summary 
         * @param {LipsyncApiGetLipsyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLipsync(requestParameters: LipsyncApiGetLipsyncRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LipSyncExtended>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLipsync(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submit a set of urls to publically hosted audio and video files or to YouTube videos. Our synchronizer will sync the video\'s lip movements to match the audio and return the synced video.
         * @summary 
         * @param {LipsyncApiLipSyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lipSync(requestParameters: LipsyncApiLipSyncRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LipSyncInitial>> {
            const lipsyncDto: LipsyncDto = {
                audioUrl: requestParameters.audioUrl,
                videoUrl: requestParameters.videoUrl,
                synergize: requestParameters.synergize,
                maxCredits: requestParameters.maxCredits,
                webhookUrl: requestParameters.webhookUrl,
                model: requestParameters.model
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.lipSync(lipsyncDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LipsyncApiLipsyncCostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lipsyncCost(requestParameters: LipsyncApiLipsyncCostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lipsyncCost(requestParameters.audioUrl, requestParameters.videoUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LipsyncApi - factory interface
 * @export
 */
export const LipsyncApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LipsyncApiFp(configuration)
    return {
        /**
         * Use the video ID from the POST request to check video status. Keep checking until status is \'completed\' and a download URL is provided.
         * @summary 
         * @param {LipsyncApiGetLipsyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLipsync(requestParameters: LipsyncApiGetLipsyncRequest, options?: AxiosRequestConfig): AxiosPromise<LipSyncExtended> {
            return localVarFp.getLipsync(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit a set of urls to publically hosted audio and video files or to YouTube videos. Our synchronizer will sync the video\'s lip movements to match the audio and return the synced video.
         * @summary 
         * @param {LipsyncApiLipSyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lipSync(requestParameters: LipsyncApiLipSyncRequest, options?: AxiosRequestConfig): AxiosPromise<LipSyncInitial> {
            return localVarFp.lipSync(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LipsyncApiLipsyncCostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lipsyncCost(requestParameters: LipsyncApiLipsyncCostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.lipsyncCost(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLipsync operation in LipsyncApi.
 * @export
 * @interface LipsyncApiGetLipsyncRequest
 */
export type LipsyncApiGetLipsyncRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LipsyncApiGetLipsync
    */
    readonly id: string
    
}

/**
 * Request parameters for lipSync operation in LipsyncApi.
 * @export
 * @interface LipsyncApiLipSyncRequest
 */
export type LipsyncApiLipSyncRequest = {
    
} & LipsyncDto

/**
 * Request parameters for lipsyncCost operation in LipsyncApi.
 * @export
 * @interface LipsyncApiLipsyncCostRequest
 */
export type LipsyncApiLipsyncCostRequest = {
    
    /**
    * A url to the audio file to be synchronized -- must be publicly accessible
    * @type {string}
    * @memberof LipsyncApiLipsyncCost
    */
    readonly audioUrl: string
    
    /**
    * A url to the video file to be synchronized -- must be publicly accessible
    * @type {string}
    * @memberof LipsyncApiLipsyncCost
    */
    readonly videoUrl: string
    
}

/**
 * LipsyncApiGenerated - object-oriented interface
 * @export
 * @class LipsyncApiGenerated
 * @extends {BaseAPI}
 */
export class LipsyncApiGenerated extends BaseAPI {
    /**
     * Use the video ID from the POST request to check video status. Keep checking until status is \'completed\' and a download URL is provided.
     * @summary 
     * @param {LipsyncApiGetLipsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LipsyncApiGenerated
     */
    public getLipsync(requestParameters: LipsyncApiGetLipsyncRequest, options?: AxiosRequestConfig) {
        return LipsyncApiFp(this.configuration).getLipsync(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit a set of urls to publically hosted audio and video files or to YouTube videos. Our synchronizer will sync the video\'s lip movements to match the audio and return the synced video.
     * @summary 
     * @param {LipsyncApiLipSyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LipsyncApiGenerated
     */
    public lipSync(requestParameters: LipsyncApiLipSyncRequest, options?: AxiosRequestConfig) {
        return LipsyncApiFp(this.configuration).lipSync(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LipsyncApiLipsyncCostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LipsyncApiGenerated
     */
    public lipsyncCost(requestParameters: LipsyncApiLipsyncCostRequest, options?: AxiosRequestConfig) {
        return LipsyncApiFp(this.configuration).lipsyncCost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
