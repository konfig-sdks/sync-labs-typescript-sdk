/* tslint:disable */
/* eslint-disable */
/*
Synchronize API

Synchronize API allows you to lipsync a video to any audio in any language.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnimateDto } from '../models';
// @ts-ignore
import { AnimateExtended } from '../models';
// @ts-ignore
import { AnimateInitial } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AnimateApi - axios parameter creator
 * @export
 */
export const AnimateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generates audio given inputted text and voice and synchronizes with the given video.
         * @summary 
         * @param {AnimateDto} animateDto Required data for animating video. Includes video URL, transcript, voice, and optional parameters for webhook integration and credit limits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        animate: async (animateDto: AnimateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'animateDto' is not null or undefined
            assertParamExists('animate', 'animateDto', animateDto)
            const localVarPath = `/animate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: animateDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/animate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(animateDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [transcript] A string of text to be spoken by the AI
         * @param {string} [transcriptUrl] A url pointing to a file of text to be spoken by the AI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        animateCost: async (transcript?: string, transcriptUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/animate/cost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })
            if (transcript !== undefined) {
                localVarQueryParameter['transcript'] = transcript;
            }

            if (transcriptUrl !== undefined) {
                localVarQueryParameter['transcriptUrl'] = transcriptUrl;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/animate/cost',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the ID from the POST request to check status. Keep checking until status is \'completed\' and a download URL is provided.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnimation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnimation', 'id', id)
            const localVarPath = `/animate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/animate/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnimateApi - functional programming interface
 * @export
 */
export const AnimateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnimateApiAxiosParamCreator(configuration)
    return {
        /**
         * Generates audio given inputted text and voice and synchronizes with the given video.
         * @summary 
         * @param {AnimateApiAnimateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async animate(requestParameters: AnimateApiAnimateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnimateInitial>> {
            const animateDto: AnimateDto = {
                videoUrl: requestParameters.videoUrl,
                transcript: requestParameters.transcript,
                voiceId: requestParameters.voiceId,
                model: requestParameters.model,
                maxCredits: requestParameters.maxCredits,
                webhookUrl: requestParameters.webhookUrl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.animate(animateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AnimateApiAnimateCostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async animateCost(requestParameters: AnimateApiAnimateCostRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.animateCost(requestParameters.transcript, requestParameters.transcriptUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use the ID from the POST request to check status. Keep checking until status is \'completed\' and a download URL is provided.
         * @summary 
         * @param {AnimateApiGetAnimationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnimation(requestParameters: AnimateApiGetAnimationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnimateExtended>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnimation(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnimateApi - factory interface
 * @export
 */
export const AnimateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnimateApiFp(configuration)
    return {
        /**
         * Generates audio given inputted text and voice and synchronizes with the given video.
         * @summary 
         * @param {AnimateApiAnimateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        animate(requestParameters: AnimateApiAnimateRequest, options?: AxiosRequestConfig): AxiosPromise<AnimateInitial> {
            return localVarFp.animate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AnimateApiAnimateCostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        animateCost(requestParameters: AnimateApiAnimateCostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.animateCost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the ID from the POST request to check status. Keep checking until status is \'completed\' and a download URL is provided.
         * @summary 
         * @param {AnimateApiGetAnimationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnimation(requestParameters: AnimateApiGetAnimationRequest, options?: AxiosRequestConfig): AxiosPromise<AnimateExtended> {
            return localVarFp.getAnimation(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for animate operation in AnimateApi.
 * @export
 * @interface AnimateApiAnimateRequest
 */
export type AnimateApiAnimateRequest = {
    
} & AnimateDto

/**
 * Request parameters for animateCost operation in AnimateApi.
 * @export
 * @interface AnimateApiAnimateCostRequest
 */
export type AnimateApiAnimateCostRequest = {
    
    /**
    * A string of text to be spoken by the AI
    * @type {string}
    * @memberof AnimateApiAnimateCost
    */
    readonly transcript?: string
    
    /**
    * A url pointing to a file of text to be spoken by the AI
    * @type {string}
    * @memberof AnimateApiAnimateCost
    */
    readonly transcriptUrl?: string
    
}

/**
 * Request parameters for getAnimation operation in AnimateApi.
 * @export
 * @interface AnimateApiGetAnimationRequest
 */
export type AnimateApiGetAnimationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AnimateApiGetAnimation
    */
    readonly id: string
    
}

/**
 * AnimateApiGenerated - object-oriented interface
 * @export
 * @class AnimateApiGenerated
 * @extends {BaseAPI}
 */
export class AnimateApiGenerated extends BaseAPI {
    /**
     * Generates audio given inputted text and voice and synchronizes with the given video.
     * @summary 
     * @param {AnimateApiAnimateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimateApiGenerated
     */
    public animate(requestParameters: AnimateApiAnimateRequest, options?: AxiosRequestConfig) {
        return AnimateApiFp(this.configuration).animate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AnimateApiAnimateCostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimateApiGenerated
     */
    public animateCost(requestParameters: AnimateApiAnimateCostRequest = {}, options?: AxiosRequestConfig) {
        return AnimateApiFp(this.configuration).animateCost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the ID from the POST request to check status. Keep checking until status is \'completed\' and a download URL is provided.
     * @summary 
     * @param {AnimateApiGetAnimationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnimateApiGenerated
     */
    public getAnimation(requestParameters: AnimateApiGetAnimationRequest, options?: AxiosRequestConfig) {
        return AnimateApiFp(this.configuration).getAnimation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
