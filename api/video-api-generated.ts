/* tslint:disable */
/* eslint-disable */
/*
Synchronize API

Synchronize API allows you to lipsync a video to any audio in any language.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateVideoDto } from '../models';
// @ts-ignore
import { VideoExtended } from '../models';
// @ts-ignore
import { VideoInitial } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideoApi - axios parameter creator
 * @export
 */
export const VideoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {string} audioUrl A url to the audio file to be synchronized -- must be publicly accessible
         * @param {string} videoUrl A url to the video file to be synchronized -- must be publicly accessible
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        cost: async (audioUrl: string, videoUrl: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'audioUrl' is not null or undefined
            assertParamExists('cost', 'audioUrl', audioUrl)
            // verify required parameter 'videoUrl' is not null or undefined
            assertParamExists('cost', 'videoUrl', videoUrl)
            const localVarPath = `/video/cost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })
            if (audioUrl !== undefined) {
                localVarQueryParameter['audioUrl'] = audioUrl;
            }

            if (videoUrl !== undefined) {
                localVarQueryParameter['videoUrl'] = videoUrl;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/video/cost',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Deprecated] Use the video ID from the POST request to check video status. Keep checking until status is \'completed\' and a download URL is provided.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLipSyncJob: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLipSyncJob', 'id', id)
            const localVarPath = `/video/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/video/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Deprecated] Submit a set of urls to publically hosted audio and video files or to YouTube videos. Our synchronizer will sync the video\'s lip movements to match the audio and return the synced video.
         * @summary 
         * @param {CreateVideoDto} createVideoDto The audio + video data to be synced. Set synergize &#x3D; false to skip our synergizer post-processor for a 10x speedup, but w/ a degredation in output quality.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        lipSync: async (createVideoDto: CreateVideoDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createVideoDto' is not null or undefined
            assertParamExists('lipSync', 'createVideoDto', createVideoDto)
            const localVarPath = `/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createVideoDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/video',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createVideoDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoApi - functional programming interface
 * @export
 */
export const VideoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {VideoApiCostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async cost(requestParameters: VideoApiCostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cost(requestParameters.audioUrl, requestParameters.videoUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [Deprecated] Use the video ID from the POST request to check video status. Keep checking until status is \'completed\' and a download URL is provided.
         * @summary 
         * @param {VideoApiGetLipSyncJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getLipSyncJob(requestParameters: VideoApiGetLipSyncJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoExtended>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLipSyncJob(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [Deprecated] Submit a set of urls to publically hosted audio and video files or to YouTube videos. Our synchronizer will sync the video\'s lip movements to match the audio and return the synced video.
         * @summary 
         * @param {VideoApiLipSyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async lipSync(requestParameters: VideoApiLipSyncRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoInitial>> {
            const createVideoDto: CreateVideoDto = {
                audioUrl: requestParameters.audioUrl,
                videoUrl: requestParameters.videoUrl,
                synergize: requestParameters.synergize,
                maxCredits: requestParameters.maxCredits,
                webhookUrl: requestParameters.webhookUrl,
                model: requestParameters.model
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.lipSync(createVideoDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideoApi - factory interface
 * @export
 */
export const VideoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideoApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {VideoApiCostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        cost(requestParameters: VideoApiCostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [Deprecated] Use the video ID from the POST request to check video status. Keep checking until status is \'completed\' and a download URL is provided.
         * @summary 
         * @param {VideoApiGetLipSyncJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLipSyncJob(requestParameters: VideoApiGetLipSyncJobRequest, options?: AxiosRequestConfig): AxiosPromise<VideoExtended> {
            return localVarFp.getLipSyncJob(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [Deprecated] Submit a set of urls to publically hosted audio and video files or to YouTube videos. Our synchronizer will sync the video\'s lip movements to match the audio and return the synced video.
         * @summary 
         * @param {VideoApiLipSyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        lipSync(requestParameters: VideoApiLipSyncRequest, options?: AxiosRequestConfig): AxiosPromise<VideoInitial> {
            return localVarFp.lipSync(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cost operation in VideoApi.
 * @export
 * @interface VideoApiCostRequest
 */
export type VideoApiCostRequest = {
    
    /**
    * A url to the audio file to be synchronized -- must be publicly accessible
    * @type {string}
    * @memberof VideoApiCost
    */
    readonly audioUrl: string
    
    /**
    * A url to the video file to be synchronized -- must be publicly accessible
    * @type {string}
    * @memberof VideoApiCost
    */
    readonly videoUrl: string
    
}

/**
 * Request parameters for getLipSyncJob operation in VideoApi.
 * @export
 * @interface VideoApiGetLipSyncJobRequest
 */
export type VideoApiGetLipSyncJobRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof VideoApiGetLipSyncJob
    */
    readonly id: string
    
}

/**
 * Request parameters for lipSync operation in VideoApi.
 * @export
 * @interface VideoApiLipSyncRequest
 */
export type VideoApiLipSyncRequest = {
    
} & CreateVideoDto

/**
 * VideoApiGenerated - object-oriented interface
 * @export
 * @class VideoApiGenerated
 * @extends {BaseAPI}
 */
export class VideoApiGenerated extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {VideoApiCostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof VideoApiGenerated
     */
    public cost(requestParameters: VideoApiCostRequest, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).cost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [Deprecated] Use the video ID from the POST request to check video status. Keep checking until status is \'completed\' and a download URL is provided.
     * @summary 
     * @param {VideoApiGetLipSyncJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof VideoApiGenerated
     */
    public getLipSyncJob(requestParameters: VideoApiGetLipSyncJobRequest, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).getLipSyncJob(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [Deprecated] Submit a set of urls to publically hosted audio and video files or to YouTube videos. Our synchronizer will sync the video\'s lip movements to match the audio and return the synced video.
     * @summary 
     * @param {VideoApiLipSyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof VideoApiGenerated
     */
    public lipSync(requestParameters: VideoApiLipSyncRequest, options?: AxiosRequestConfig) {
        return VideoApiFp(this.configuration).lipSync(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
